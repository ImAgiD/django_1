'01.04.24=========================Введение в DRF. Структура Django========================='

'02.04.24======Модели Django: типы полей и их опции. Работа с миграциями. Связи между таблицами.======'

Model - класс, который характеризует струтуру вашей таблицы в БД, где аттрибуты класса - поля в таблице (наследуется от класса 'django.db.models.Model')

Manager - класс, который предоставляет доступ через методы к "Django ORM" (которая в свою очередь отправляет запросы в БД) 

По умолчанию 'manager' добавляется в аттрибут 'objects' в модель 

Product.object.get(id=1) также .create/.filter


---------------------------------ПОЛЯ
Все поля наследуются от класса 'django.db.models.Field'

1. CharField -  для строковых значений (объязательно нужно указать 'max_length) 

2. SlugField - для хранения slug (короткая метка для чего-либо, содержащая только буквы, цифры, подчёркивания или дефисы, они используются в URL на сайте)

3. TextField - для хранения текста 

4. DecimalField - для дробных чисел (два объязательных аргумента: 'max_digits' - кол-во цифр целой части, 'decimal_places' - кол-во цифр дробной части)

5. IntegerField - для чисел, положительные так и отрицательные

6. BooleanField - для bool значений 

7. DateField - для дат (питоновская версия - datetime.date) (можно указать 'auto_now' - обновляется каждый раз когда запись обновляется) ('auto_now_add' - задается при создании объекта)

8. TimeField - только для времени, тоже можно добавить 'auto_now' или 'auto_now_add'

9. DateTimeField - для дат и для времени

10. DurationField - для периода времени

11. EmailField - для эл почты (имеет встроенную проверку)

12. FileField - для загрузки файлов ('upload_to' - для указания директории, где будут храниться файлы В БД буде храниться лишь путь до этих файлов)

13. ImageField - для загрузки фотографий (тоже самое тчо и FileField, но требуется библиотека 'Pillow') 

14. JSONField - для хранения строк в формате JSON 

-----------------------Ключевые / Основные параметры для полей
null - если True, то будет ставить в БД объект 'null', если данные не переданы
blank - (больше для строковых полей) True - будет ставить 'пустую строку', если данные не переданы
choices - позволяет ограничить возможные варианты записей в это поле
default - добавляет значение по умолчанию, если данные не были переданы
editable - если False, то запись нельзя будет поменять
primary_key - есди True, то это поле будет первичным ключом в этой таблице (наприме: id / number)/ По умолчанию django создает "id"
unique - если True, то поле должно хранить уникальные значения, если написать то что уже было выйдет ошибка
validators - для проверки чего-то

python3 manage.py makemigrations для миграция
python3 manage.py migrate